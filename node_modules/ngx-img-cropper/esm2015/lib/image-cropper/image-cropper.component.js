/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
import { CropperSettings } from './cropper-settings';
import { ImageCropper } from './imageCropper';
import { CropPosition } from './model/cropPosition';
import { Exif } from './exif';
export class ImageCropperComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.cropPositionChange = new EventEmitter();
        this.exif = new Exif();
        // tslint:disable-next-line:no-output-on-prefix
        this.onCrop = new EventEmitter();
        this.imageSet = new EventEmitter();
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const canvas = this.cropcanvas.nativeElement;
        if (!this.settings) {
            this.settings = new CropperSettings();
        }
        if (this.settings.cropperClass) {
            this.renderer.setAttribute(canvas, 'class', this.settings.cropperClass);
        }
        if (!this.settings.dynamicSizing) {
            this.renderer.setAttribute(canvas, 'width', this.settings.canvasWidth.toString());
            this.renderer.setAttribute(canvas, 'height', this.settings.canvasHeight.toString());
        }
        else {
            this.windowListener = this.resize.bind(this);
            window.addEventListener('resize', this.windowListener);
        }
        if (!this.cropper) {
            this.cropper = new ImageCropper(this.settings);
        }
        this.cropper.prepare(canvas);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isCropPositionChanged(changes)) {
            this.cropper.updateCropPosition(this.cropPosition.toBounds());
            if (this.cropper.isImageSet()) {
                /** @type {?} */
                const bounds = this.cropper.getCropBounds();
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(bounds);
            }
            this.updateCropBounds();
        }
        if (changes.inputImage) {
            this.setImage(changes.inputImage.currentValue);
        }
        if (changes.settings && this.cropper) {
            this.cropper.updateSettings(this.settings);
            if (this.cropper.isImageSet()) {
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(this.cropper.getCropBounds());
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.settings.dynamicSizing && this.windowListener) {
            window.removeEventListener('resize', this.windowListener);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        this.cropper.onTouchMove(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        this.cropper.onTouchStart(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        this.cropper.onTouchEnd(event);
        if (this.cropper.isImageSet()) {
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        this.cropper.onMouseDown(event);
        // if (!this.cropper.isImageSet() && !this.settings.noFileInput) {
        //   // load img
        //   this.fileInput.nativeElement.click();
        // }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        if (this.cropper.isImageSet()) {
            this.cropper.onMouseUp(event);
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        this.cropper.onMouseMove(event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    fileChangeListener($event) {
        if ($event.target.files.length === 0) {
            return;
        }
        /** @type {?} */
        const file = $event.target.files[0];
        if (this.settings.allowedFilesRegex.test(file.name)) {
            /** @type {?} */
            const image = new Image();
            /** @type {?} */
            const fileReader = new FileReader();
            fileReader.addEventListener('loadend', (/**
             * @param {?} loadEvent
             * @return {?}
             */
            (loadEvent) => {
                image.addEventListener('load', (/**
                 * @return {?}
                 */
                () => {
                    this.setImage(image);
                }));
                image.src = loadEvent.target.result;
            }));
            fileReader.readAsDataURL(file);
        }
    }
    /**
     * @private
     * @return {?}
     */
    resize() {
        /** @type {?} */
        const canvas = this.cropcanvas.nativeElement;
        this.settings.canvasWidth = canvas.offsetWidth;
        this.settings.canvasHeight = canvas.offsetHeight;
        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, true);
    }
    /**
     * @return {?}
     */
    reset() {
        this.cropper.reset();
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass);
        this.image.image = this.cropper.getCroppedImageHelper().src;
    }
    /**
     * @param {?} image
     * @param {?=} newBounds
     * @return {?}
     */
    setImage(image, newBounds = null) {
        this.imageSet.emit(true);
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', `${this.settings.cropperClass} ${this.settings.croppingClass}`);
        this.raf = window.requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            if (this.raf) {
                window.cancelAnimationFrame(this.raf);
            }
            if (image.naturalHeight > 0 && image.naturalWidth > 0) {
                image.height = image.naturalHeight;
                image.width = image.naturalWidth;
                window.cancelAnimationFrame(this.raf);
                this.getOrientedImage(image, (/**
                 * @param {?} img
                 * @return {?}
                 */
                (img) => {
                    if (this.settings.dynamicSizing) {
                        /** @type {?} */
                        const canvas = this.cropcanvas.nativeElement;
                        this.settings.canvasWidth = canvas.offsetWidth;
                        this.settings.canvasHeight = canvas.offsetHeight;
                        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, false);
                    }
                    this.cropper.setImage(img);
                    if (this.cropPosition && this.cropPosition.isInitialized()) {
                        this.cropper.updateCropPosition(this.cropPosition.toBounds());
                    }
                    this.image.original = img;
                    /** @type {?} */
                    let bounds = this.cropper.getCropBounds();
                    this.image.image = this.cropper.getCroppedImageHelper().src;
                    if (!this.image) {
                        this.image = image;
                    }
                    if (newBounds != null) {
                        bounds = newBounds;
                        this.cropper.setBounds(bounds);
                        this.cropper.updateCropPosition(bounds);
                    }
                    this.onCrop.emit(bounds);
                }));
            }
        }));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isCropPositionChanged(changes) {
        if (this.cropper &&
            changes.cropPosition &&
            this.isCropPositionUpdateNeeded) {
            return true;
        }
        else {
            this.isCropPositionUpdateNeeded = true;
            return false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateCropBounds() {
        /** @type {?} */
        const cropBound = this.cropper.getCropBounds();
        this.cropPositionChange.emit(new CropPosition(cropBound.left, cropBound.top, cropBound.width, cropBound.height));
        this.isCropPositionUpdateNeeded = false;
    }
    /**
     * @private
     * @param {?} image
     * @param {?} callback
     * @return {?}
     */
    getOrientedImage(image, callback) {
        /** @type {?} */
        let img;
        this.exif.getData(image, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const orientation = this.exif.getTag(image, 'Orientation');
            if ([3, 6, 8].indexOf(orientation) > -1) {
                /** @type {?} */
                const canvas = document.createElement('canvas');
                /** @type {?} */
                const ctx = (/** @type {?} */ (canvas.getContext('2d')));
                /** @type {?} */
                let cw = image.width;
                /** @type {?} */
                let ch = image.height;
                /** @type {?} */
                let cx = 0;
                /** @type {?} */
                let cy = 0;
                /** @type {?} */
                let deg = 0;
                switch (orientation) {
                    case 3:
                        cx = -image.width;
                        cy = -image.height;
                        deg = 180;
                        break;
                    case 6:
                        cw = image.height;
                        ch = image.width;
                        cy = -image.height;
                        deg = 90;
                        break;
                    case 8:
                        cw = image.height;
                        ch = image.width;
                        cx = -image.width;
                        deg = 270;
                        break;
                    default:
                        break;
                }
                canvas.width = cw;
                canvas.height = ch;
                ctx.rotate((deg * Math.PI) / 180);
                ctx.drawImage(image, cx, cy);
                img = document.createElement('img');
                img.width = cw;
                img.height = ch;
                img.addEventListener('load', (/**
                 * @return {?}
                 */
                () => {
                    callback(img);
                }));
                img.src = canvas.toDataURL('image/png');
            }
            else {
                img = image;
                callback(img);
            }
        }));
    }
}
ImageCropperComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'img-cropper',
                template: "<span class=\"ng2-imgcrop\">\n  <input\n    *ngIf=\"!settings.noFileInput\"\n    #fileInput\n    type=\"file\"\n    accept=\"image/*\"\n    (change)=\"fileChangeListener($event)\"\n  />\n  <canvas\n    #cropcanvas\n    (mousedown)=\"onMouseDown($event)\"\n    (mouseup)=\"onMouseUp($event)\"\n    (mousemove)=\"onMouseMove($event)\"\n    (mouseleave)=\"onMouseUp($event)\"\n    (touchmove)=\"onTouchMove($event)\"\n    (touchend)=\"onTouchEnd($event)\"\n    (touchstart)=\"onTouchStart($event)\"\n  >\n  </canvas>\n</span>\n"
            }] }
];
/** @nocollapse */
ImageCropperComponent.ctorParameters = () => [
    { type: Renderer2 }
];
ImageCropperComponent.propDecorators = {
    cropcanvas: [{ type: ViewChild, args: ['cropcanvas', { static: true },] }],
    fileInput: [{ type: ViewChild, args: ['fileInput', { static: false },] }],
    settings: [{ type: Input }],
    image: [{ type: Input }],
    inputImage: [{ type: Input }],
    cropper: [{ type: Input }],
    cropPosition: [{ type: Input }],
    cropPositionChange: [{ type: Output }],
    onCrop: [{ type: Output }],
    imageSet: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ImageCropperComponent.prototype.cropcanvas;
    /** @type {?} */
    ImageCropperComponent.prototype.fileInput;
    /** @type {?} */
    ImageCropperComponent.prototype.settings;
    /** @type {?} */
    ImageCropperComponent.prototype.image;
    /** @type {?} */
    ImageCropperComponent.prototype.inputImage;
    /** @type {?} */
    ImageCropperComponent.prototype.cropper;
    /** @type {?} */
    ImageCropperComponent.prototype.cropPosition;
    /** @type {?} */
    ImageCropperComponent.prototype.cropPositionChange;
    /**
     * @type {?}
     * @private
     */
    ImageCropperComponent.prototype.exif;
    /** @type {?} */
    ImageCropperComponent.prototype.onCrop;
    /** @type {?} */
    ImageCropperComponent.prototype.imageSet;
    /** @type {?} */
    ImageCropperComponent.prototype.croppedWidth;
    /** @type {?} */
    ImageCropperComponent.prototype.croppedHeight;
    /** @type {?} */
    ImageCropperComponent.prototype.intervalRef;
    /** @type {?} */
    ImageCropperComponent.prototype.raf;
    /** @type {?} */
    ImageCropperComponent.prototype.renderer;
    /** @type {?} */
    ImageCropperComponent.prototype.windowListener;
    /**
     * @type {?}
     * @private
     */
    ImageCropperComponent.prototype.isCropPositionUpdateNeeded;
}
//# sourceMappingURL=data:application/json;base64,