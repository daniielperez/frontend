/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Handle } from './handle';
import { PointPool } from './pointPool';
export class DragMarker extends Handle {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @param {?} cropperSettings
     */
    constructor(x, y, radius, cropperSettings) {
        super(x, y, radius, cropperSettings);
        this.iconPoints = [];
        this.scaledIconPoints = [];
        this.getDragIconPoints(this.iconPoints, 1);
        this.getDragIconPoints(this.scaledIconPoints, 1.2);
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    draw(ctx) {
        if (this.over || this.drag) {
            this.drawIcon(ctx, this.scaledIconPoints);
        }
        else {
            this.drawIcon(ctx, this.iconPoints);
        }
    }
    /**
     * @param {?} arr
     * @param {?} scale
     * @return {?}
     */
    getDragIconPoints(arr, scale) {
        /** @type {?} */
        const maxLength = 17 * scale;
        /** @type {?} */
        const arrowWidth = 14 * scale;
        /** @type {?} */
        const arrowLength = 8 * scale;
        /** @type {?} */
        const connectorThroat = 4 * scale;
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(-arrowWidth / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(0, maxLength));
        arr.push(new PointPool().instance.borrow(arrowWidth / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(maxLength, 0));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, -arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(arrowWidth / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(0, -maxLength));
        arr.push(new PointPool().instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(-maxLength, 0));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, connectorThroat / 2));
    }
    /**
     * @param {?} ctx
     * @param {?} points
     * @return {?}
     */
    drawIcon(ctx, points) {
        if (this.cropperSettings.showCenterMarker) {
            ctx.beginPath();
            ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);
            for (const p of points) {
                ctx.lineTo(p.x + this.position.x, p.y + this.position.y);
            }
            ctx.closePath();
            ctx.fillStyle = this.cropperSettings.cropperDrawSettings.dragIconFillColor;
            ctx.fill();
            ctx.lineWidth = this.cropperSettings.cropperDrawSettings.dragIconStrokeWidth;
            ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.dragIconStrokeColor;
            ctx.stroke();
        }
    }
    /**
     * @param {?} bounds
     * @return {?}
     */
    recalculatePosition(bounds) {
        /** @type {?} */
        const c = bounds.getCentre();
        this.setPosition(c.x, c.y);
        new PointPool().instance.returnPoint(c);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragMarker.prototype.iconPoints;
    /**
     * @type {?}
     * @private
     */
    DragMarker.prototype.scaledIconPoints;
}
//# sourceMappingURL=data:application/json;base64,