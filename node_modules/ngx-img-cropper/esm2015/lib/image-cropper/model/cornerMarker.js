/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Handle } from './handle';
/**
 * @record
 */
export function ICornerMarker() { }
if (false) {
    /** @type {?} */
    ICornerMarker.prototype.horizontalNeighbour;
    /** @type {?} */
    ICornerMarker.prototype.verticalNeighbour;
}
export class CornerMarker extends Handle {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @param {?} cropperSettings
     */
    constructor(x, y, radius, cropperSettings) {
        super(x, y, radius, cropperSettings);
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawCornerBorder(ctx) {
        /** @type {?} */
        let sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        /** @type {?} */
        let hDirection = this.cropperSettings.markerSizeMultiplier;
        /** @type {?} */
        let vDirection = this.cropperSettings.markerSizeMultiplier;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        ctx.beginPath();
        if (this.cropperSettings.cropperDrawSettings.lineDash) {
            ctx.setLineDash([1, 3]);
        }
        ctx.lineJoin = 'miter';
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.strokeWidth;
        ctx.strokeStyle =
            this.cropperSettings.cropperDrawSettings.strokeColor ||
                'rgba(255,255,255,.7)';
        ctx.stroke();
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawCornerFill(ctx) {
        /** @type {?} */
        let sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        /** @type {?} */
        let hDirection = this.cropperSettings.markerSizeMultiplier;
        /** @type {?} */
        let vDirection = this.cropperSettings.markerSizeMultiplier;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.cropperSettings.rounded) {
            /** @type {?} */
            const width = this.position.x - this.horizontalNeighbour.position.x;
            /** @type {?} */
            const height = this.position.y - this.verticalNeighbour.position.y;
            /** @type {?} */
            const offX = Math.round(Math.sin(Math.PI / 2) * Math.abs(width / 2)) / 4;
            /** @type {?} */
            const offY = Math.round(Math.sin(Math.PI / 2) * Math.abs(height / 2)) / 4;
            this.offset.x = hDirection > 0 ? offX : -offX;
            this.offset.y = vDirection > 0 ? offY : -offY;
        }
        else {
            this.offset.x = 0;
            this.offset.y = 0;
        }
        ctx.beginPath();
        if (this.cropperSettings.cropperDrawSettings.lineDash) {
            ctx.setLineDash([1, 3]);
        }
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.fillStyle =
            this.cropperSettings.cropperDrawSettings.fillColor ||
                'rgba(255,255,255,.7)';
        ctx.fill();
    }
    /**
     * @param {?} x
     * @return {?}
     */
    moveX(x) {
        this.setPosition(x, this.position.y);
    }
    /**
     * @param {?} y
     * @return {?}
     */
    moveY(y) {
        this.setPosition(this.position.x, y);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    move(x, y) {
        this.setPosition(x, y);
        this.verticalNeighbour.moveX(x);
        this.horizontalNeighbour.moveY(y);
    }
    /**
     * @param {?} neighbour
     * @return {?}
     */
    addHorizontalNeighbour(neighbour) {
        this.horizontalNeighbour = neighbour;
    }
    /**
     * @param {?} neighbour
     * @return {?}
     */
    addVerticalNeighbour(neighbour) {
        this.verticalNeighbour = neighbour;
    }
    /**
     * @return {?}
     */
    getHorizontalNeighbour() {
        return this.horizontalNeighbour;
    }
    /**
     * @return {?}
     */
    getVerticalNeighbour() {
        return this.verticalNeighbour;
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    draw(ctx) {
        this.drawCornerFill(ctx);
        this.drawCornerBorder(ctx);
    }
}
if (false) {
    /** @type {?} */
    CornerMarker.prototype.horizontalNeighbour;
    /** @type {?} */
    CornerMarker.prototype.verticalNeighbour;
}
//# sourceMappingURL=data:application/json;base64,