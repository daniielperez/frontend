/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Point } from './point';
var PointPool = /** @class */ (function () {
    function PointPool(initialSize) {
        if (initialSize === void 0) { initialSize = 1; }
        /** @type {?} */
        var prev = (this.firstAvailable = new Point());
        for (var i = 1; i < initialSize; i++) {
            /** @type {?} */
            var p = new Point();
            prev.next = p;
            prev = p;
        }
    }
    Object.defineProperty(PointPool.prototype, "instance", {
        get: /**
         * @return {?}
         */
        function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    PointPool.prototype.borrow = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        if (this.firstAvailable == null) {
            throw new Error('Pool exhausted');
        }
        this.borrowed++;
        /** @type {?} */
        var p = this.firstAvailable;
        this.firstAvailable = p.next;
        p.x = x;
        p.y = y;
        return p;
    };
    /**
     * @param {?} p
     * @return {?}
     */
    PointPool.prototype.returnPoint = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        this.borrowed--;
        p.x = 0;
        p.y = 0;
        p.next = this.firstAvailable;
        this.firstAvailable = p;
    };
    return PointPool;
}());
export { PointPool };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PointPool.prototype.borrowed;
    /**
     * @type {?}
     * @private
     */
    PointPool.prototype.firstAvailable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRQb29sLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWltZy1jcm9wcGVyLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLWNyb3BwZXIvbW9kZWwvcG9pbnRQb29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDO0lBSUUsbUJBQVksV0FBdUI7UUFBdkIsNEJBQUEsRUFBQSxlQUF1Qjs7WUFDN0IsSUFBSSxHQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBRXJELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUM5QixDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7WUFDZCxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ1Y7SUFDSCxDQUFDO0lBRUQsc0JBQUksK0JBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzs7O09BQUE7Ozs7OztJQUVNLDBCQUFNOzs7OztJQUFiLFVBQWMsQ0FBUyxFQUFFLENBQVM7UUFDaEMsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7O1lBQ1YsQ0FBQyxHQUFVLElBQUksQ0FBQyxjQUFjO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDOzs7OztJQUVNLCtCQUFXOzs7O0lBQWxCLFVBQW1CLENBQVE7UUFDekIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDUixDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQXJDRCxJQXFDQzs7Ozs7OztJQXBDQyw2QkFBeUI7Ozs7O0lBQ3pCLG1DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9pbnRQb29sIHtcclxuICBwcml2YXRlIGJvcnJvd2VkOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBmaXJzdEF2YWlsYWJsZTogUG9pbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGluaXRpYWxTaXplOiBudW1iZXIgPSAxKSB7XHJcbiAgICBsZXQgcHJldjogUG9pbnQgPSAodGhpcy5maXJzdEF2YWlsYWJsZSA9IG5ldyBQb2ludCgpKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGluaXRpYWxTaXplOyBpKyspIHtcclxuICAgICAgY29uc3QgcCA9IG5ldyBQb2ludCgpO1xyXG4gICAgICBwcmV2Lm5leHQgPSBwO1xyXG4gICAgICBwcmV2ID0gcDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBpbnN0YW5jZSgpOiBQb2ludFBvb2wge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYm9ycm93KHg6IG51bWJlciwgeTogbnVtYmVyKTogUG9pbnQge1xyXG4gICAgaWYgKHRoaXMuZmlyc3RBdmFpbGFibGUgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvb2wgZXhoYXVzdGVkJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmJvcnJvd2VkKys7XHJcbiAgICBjb25zdCBwOiBQb2ludCA9IHRoaXMuZmlyc3RBdmFpbGFibGU7XHJcbiAgICB0aGlzLmZpcnN0QXZhaWxhYmxlID0gcC5uZXh0O1xyXG4gICAgcC54ID0geDtcclxuICAgIHAueSA9IHk7XHJcbiAgICByZXR1cm4gcDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXR1cm5Qb2ludChwOiBQb2ludCkge1xyXG4gICAgdGhpcy5ib3Jyb3dlZC0tO1xyXG4gICAgcC54ID0gMDtcclxuICAgIHAueSA9IDA7XHJcbiAgICBwLm5leHQgPSB0aGlzLmZpcnN0QXZhaWxhYmxlO1xyXG4gICAgdGhpcy5maXJzdEF2YWlsYWJsZSA9IHA7XHJcbiAgfVxyXG59XHJcbiJdfQ==