/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PointPool } from './pointPool';
var Bounds = /** @class */ (function () {
    function Bounds(x, y, width, height) {
        if (x === void 0) {
            x = 0;
        }
        if (y === void 0) {
            y = 0;
        }
        if (width === void 0) {
            width = 0;
        }
        if (height === void 0) {
            height = 0;
        }
        this.left = x;
        this.right = x + width;
        this.top = y;
        this.bottom = y + height;
    }
    Object.defineProperty(Bounds.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this.right - this.left;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bottom - this.top;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Bounds.prototype.getCentre = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var w = this.width;
        /** @type {?} */
        var h = this.height;
        return new PointPool().instance.borrow(this.left + w / 2, this.top + h / 2);
    };
    return Bounds;
}());
export { Bounds };
if (false) {
    /** @type {?} */
    Bounds.prototype.left;
    /** @type {?} */
    Bounds.prototype.right;
    /** @type {?} */
    Bounds.prototype.top;
    /** @type {?} */
    Bounds.prototype.bottom;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWltZy1jcm9wcGVyLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLWNyb3BwZXIvbW9kZWwvYm91bmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDO0lBTUUsZ0JBQVksQ0FBVSxFQUFFLENBQVUsRUFBRSxLQUFjLEVBQUUsTUFBZTtRQUNqRSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNoQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ1A7UUFDRCxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNoQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ1A7UUFDRCxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwQixLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ1g7UUFDRCxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNyQixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBRUQsc0JBQVcseUJBQUs7Ozs7UUFBaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDBCQUFNOzs7O1FBQWpCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7Ozs7SUFFTSwwQkFBUzs7O0lBQWhCOztZQUNRLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSzs7WUFDZCxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU07UUFDckIsT0FBTyxJQUFJLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FBQyxBQXRDRCxJQXNDQzs7OztJQXJDQyxzQkFBb0I7O0lBQ3BCLHVCQUFxQjs7SUFDckIscUJBQW1COztJQUNuQix3QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vcG9pbnQnO1xyXG5pbXBvcnQgeyBQb2ludFBvb2wgfSBmcm9tICcuL3BvaW50UG9vbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm91bmRzIHtcclxuICBwdWJsaWMgbGVmdDogbnVtYmVyO1xyXG4gIHB1YmxpYyByaWdodDogbnVtYmVyO1xyXG4gIHB1YmxpYyB0b3A6IG51bWJlcjtcclxuICBwdWJsaWMgYm90dG9tOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpIHtcclxuICAgIGlmICh4ID09PSB2b2lkIDApIHtcclxuICAgICAgeCA9IDA7XHJcbiAgICB9XHJcbiAgICBpZiAoeSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIHkgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKHdpZHRoID09PSB2b2lkIDApIHtcclxuICAgICAgd2lkdGggPSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKGhlaWdodCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIGhlaWdodCA9IDA7XHJcbiAgICB9XHJcbiAgICB0aGlzLmxlZnQgPSB4O1xyXG4gICAgdGhpcy5yaWdodCA9IHggKyB3aWR0aDtcclxuICAgIHRoaXMudG9wID0geTtcclxuICAgIHRoaXMuYm90dG9tID0geSArIGhlaWdodDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmJvdHRvbSAtIHRoaXMudG9wO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENlbnRyZSgpOiBQb2ludCB7XHJcbiAgICBjb25zdCB3ID0gdGhpcy53aWR0aDtcclxuICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodDtcclxuICAgIHJldHVybiBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KHRoaXMubGVmdCArIHcgLyAyLCB0aGlzLnRvcCArIGggLyAyKTtcclxuICB9XHJcbn1cclxuIl19