/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Handle } from './handle';
import { PointPool } from './pointPool';
var DragMarker = /** @class */ (function (_super) {
    tslib_1.__extends(DragMarker, _super);
    function DragMarker(x, y, radius, cropperSettings) {
        var _this = _super.call(this, x, y, radius, cropperSettings) || this;
        _this.iconPoints = [];
        _this.scaledIconPoints = [];
        _this.getDragIconPoints(_this.iconPoints, 1);
        _this.getDragIconPoints(_this.scaledIconPoints, 1.2);
        return _this;
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    DragMarker.prototype.draw = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        if (this.over || this.drag) {
            this.drawIcon(ctx, this.scaledIconPoints);
        }
        else {
            this.drawIcon(ctx, this.iconPoints);
        }
    };
    /**
     * @param {?} arr
     * @param {?} scale
     * @return {?}
     */
    DragMarker.prototype.getDragIconPoints = /**
     * @param {?} arr
     * @param {?} scale
     * @return {?}
     */
    function (arr, scale) {
        /** @type {?} */
        var maxLength = 17 * scale;
        /** @type {?} */
        var arrowWidth = 14 * scale;
        /** @type {?} */
        var arrowLength = 8 * scale;
        /** @type {?} */
        var connectorThroat = 4 * scale;
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(-arrowWidth / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(0, maxLength));
        arr.push(new PointPool().instance.borrow(arrowWidth / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, maxLength - arrowLength));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(maxLength, 0));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, -arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(maxLength - arrowLength, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(connectorThroat / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(arrowWidth / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(0, -maxLength));
        arr.push(new PointPool().instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(-maxLength, 0));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, arrowWidth / 2));
        arr.push(new PointPool().instance.borrow(-maxLength + arrowLength, connectorThroat / 2));
        arr.push(new PointPool().instance.borrow(-connectorThroat / 2, connectorThroat / 2));
    };
    /**
     * @param {?} ctx
     * @param {?} points
     * @return {?}
     */
    DragMarker.prototype.drawIcon = /**
     * @param {?} ctx
     * @param {?} points
     * @return {?}
     */
    function (ctx, points) {
        var e_1, _a;
        if (this.cropperSettings.showCenterMarker) {
            ctx.beginPath();
            ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);
            try {
                for (var points_1 = tslib_1.__values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {
                    var p = points_1_1.value;
                    ctx.lineTo(p.x + this.position.x, p.y + this.position.y);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            ctx.closePath();
            ctx.fillStyle = this.cropperSettings.cropperDrawSettings.dragIconFillColor;
            ctx.fill();
            ctx.lineWidth = this.cropperSettings.cropperDrawSettings.dragIconStrokeWidth;
            ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.dragIconStrokeColor;
            ctx.stroke();
        }
    };
    /**
     * @param {?} bounds
     * @return {?}
     */
    DragMarker.prototype.recalculatePosition = /**
     * @param {?} bounds
     * @return {?}
     */
    function (bounds) {
        /** @type {?} */
        var c = bounds.getCentre();
        this.setPosition(c.x, c.y);
        new PointPool().instance.returnPoint(c);
    };
    return DragMarker;
}(Handle));
export { DragMarker };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragMarker.prototype.iconPoints;
    /**
     * @type {?}
     * @private
     */
    DragMarker.prototype.scaledIconPoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ01hcmtlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbWctY3JvcHBlci8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZS1jcm9wcGVyL21vZGVsL2RyYWdNYXJrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFLeEM7SUFBZ0Msc0NBQU07SUFJcEMsb0JBQ0UsQ0FBUyxFQUNULENBQVMsRUFDVCxNQUFjLEVBQ2QsZUFBZ0M7UUFKbEMsWUFNRSxrQkFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsU0FLckM7UUFKQyxLQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNDLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7O0lBQ3JELENBQUM7Ozs7O0lBRU0seUJBQUk7Ozs7SUFBWCxVQUFZLEdBQTZCO1FBQ3ZDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7Ozs7SUFFTSxzQ0FBaUI7Ozs7O0lBQXhCLFVBQXlCLEdBQWUsRUFBRSxLQUFhOztZQUMvQyxTQUFTLEdBQUcsRUFBRSxHQUFHLEtBQUs7O1lBQ3RCLFVB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LGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQztZQUM3RSxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUM7WUFDL0UsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7OztJQUVNLHdDQUFtQjs7OztJQUExQixVQUEyQixNQUFjOztZQUNqQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLElBQUksU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBakpELENBQWdDLE1BQU0sR0FpSnJDOzs7Ozs7O0lBaEpDLGdDQUFpQzs7Ozs7SUFDakMsc0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFuZGxlIH0gZnJvbSAnLi9oYW5kbGUnO1xyXG5pbXBvcnQgeyBQb2ludFBvb2wgfSBmcm9tICcuL3BvaW50UG9vbCc7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XHJcbmltcG9ydCB7IENyb3BwZXJTZXR0aW5ncyB9IGZyb20gJy4uL2Nyb3BwZXItc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tICcuL2JvdW5kcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRHJhZ01hcmtlciBleHRlbmRzIEhhbmRsZSB7XHJcbiAgcHJpdmF0ZSBpY29uUG9pbnRzOiBBcnJheTxQb2ludD47XHJcbiAgcHJpdmF0ZSBzY2FsZWRJY29uUG9pbnRzOiBBcnJheTxQb2ludD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeDogbnVtYmVyLFxyXG4gICAgeTogbnVtYmVyLFxyXG4gICAgcmFkaXVzOiBudW1iZXIsXHJcbiAgICBjcm9wcGVyU2V0dGluZ3M6IENyb3BwZXJTZXR0aW5nc1xyXG4gICkge1xyXG4gICAgc3VwZXIoeCwgeSwgcmFkaXVzLCBjcm9wcGVyU2V0dGluZ3MpO1xyXG4gICAgdGhpcy5pY29uUG9pbnRzID0gW107XHJcbiAgICB0aGlzLnNjYWxlZEljb25Qb2ludHMgPSBbXTtcclxuICAgIHRoaXMuZ2V0RHJhZ0ljb25Qb2ludHModGhpcy5pY29uUG9pbnRzLCAxKTtcclxuICAgIHRoaXMuZ2V0RHJhZ0ljb25Qb2ludHModGhpcy5zY2FsZWRJY29uUG9pbnRzLCAxLjIpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgIGlmICh0aGlzLm92ZXIgfHwgdGhpcy5kcmFnKSB7XHJcbiAgICAgIHRoaXMuZHJhd0ljb24oY3R4LCB0aGlzLnNjYWxlZEljb25Qb2ludHMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kcmF3SWNvbihjdHgsIHRoaXMuaWNvblBvaW50cyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RHJhZ0ljb25Qb2ludHMoYXJyOiBBcnJheTxhbnk+LCBzY2FsZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBtYXhMZW5ndGggPSAxNyAqIHNjYWxlO1xyXG4gICAgY29uc3QgYXJyb3dXaWR0aCA9IDE0ICogc2NhbGU7XHJcbiAgICBjb25zdCBhcnJvd0xlbmd0aCA9IDggKiBzY2FsZTtcclxuICAgIGNvbnN0IGNvbm5lY3RvclRocm9hdCA9IDQgKiBzY2FsZTtcclxuXHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdyhcclxuICAgICAgICAtY29ubmVjdG9yVGhyb2F0IC8gMixcclxuICAgICAgICBtYXhMZW5ndGggLSBhcnJvd0xlbmd0aFxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coLWFycm93V2lkdGggLyAyLCBtYXhMZW5ndGggLSBhcnJvd0xlbmd0aClcclxuICAgICk7XHJcbiAgICBhcnIucHVzaChuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KDAsIG1heExlbmd0aCkpO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coYXJyb3dXaWR0aCAvIDIsIG1heExlbmd0aCAtIGFycm93TGVuZ3RoKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KFxyXG4gICAgICAgIGNvbm5lY3RvclRocm9hdCAvIDIsXHJcbiAgICAgICAgbWF4TGVuZ3RoIC0gYXJyb3dMZW5ndGhcclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KGNvbm5lY3RvclRocm9hdCAvIDIsIGNvbm5lY3RvclRocm9hdCAvIDIpXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coXHJcbiAgICAgICAgbWF4TGVuZ3RoIC0gYXJyb3dMZW5ndGgsXHJcbiAgICAgICAgY29ubmVjdG9yVGhyb2F0IC8gMlxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3cobWF4TGVuZ3RoIC0gYXJyb3dMZW5ndGgsIGFycm93V2lkdGggLyAyKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3cobWF4TGVuZ3RoLCAwKSk7XHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdyhtYXhMZW5ndGggLSBhcnJvd0xlbmd0aCwgLWFycm93V2lkdGggLyAyKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KFxyXG4gICAgICAgIG1heExlbmd0aCAtIGFycm93TGVuZ3RoLFxyXG4gICAgICAgIC1jb25uZWN0b3JUaHJvYXQgLyAyXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdyhjb25uZWN0b3JUaHJvYXQgLyAyLCAtY29ubmVjdG9yVGhyb2F0IC8gMilcclxuICAgICk7XHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdyhcclxuICAgICAgICBjb25uZWN0b3JUaHJvYXQgLyAyLFxyXG4gICAgICAgIC1tYXhMZW5ndGggKyBhcnJvd0xlbmd0aFxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coYXJyb3dXaWR0aCAvIDIsIC1tYXhMZW5ndGggKyBhcnJvd0xlbmd0aClcclxuICAgICk7XHJcbiAgICBhcnIucHVzaChuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KDAsIC1tYXhMZW5ndGgpKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KC1hcnJvd1dpZHRoIC8gMiwgLW1heExlbmd0aCArIGFycm93TGVuZ3RoKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KFxyXG4gICAgICAgIC1jb25uZWN0b3JUaHJvYXQgLyAyLFxyXG4gICAgICAgIC1tYXhMZW5ndGggKyBhcnJvd0xlbmd0aFxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coXHJcbiAgICAgICAgLWNvbm5lY3RvclRocm9hdCAvIDIsXHJcbiAgICAgICAgLWNvbm5lY3RvclRocm9hdCAvIDJcclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KFxyXG4gICAgICAgIC1tYXhMZW5ndGggKyBhcnJvd0xlbmd0aCxcclxuICAgICAgICAtY29ubmVjdG9yVGhyb2F0IC8gMlxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2goXHJcbiAgICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5ib3Jyb3coLW1heExlbmd0aCArIGFycm93TGVuZ3RoLCAtYXJyb3dXaWR0aCAvIDIpXHJcbiAgICApO1xyXG4gICAgYXJyLnB1c2gobmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdygtbWF4TGVuZ3RoLCAwKSk7XHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdygtbWF4TGVuZ3RoICsgYXJyb3dMZW5ndGgsIGFycm93V2lkdGggLyAyKVxyXG4gICAgKTtcclxuICAgIGFyci5wdXNoKFxyXG4gICAgICBuZXcgUG9pbnRQb29sKCkuaW5zdGFuY2UuYm9ycm93KFxyXG4gICAgICAgIC1tYXhMZW5ndGggKyBhcnJvd0xlbmd0aCxcclxuICAgICAgICBjb25uZWN0b3JUaHJvYXQgLyAyXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICBhcnIucHVzaChcclxuICAgICAgbmV3IFBvaW50UG9vbCgpLmluc3RhbmNlLmJvcnJvdygtY29ubmVjdG9yVGhyb2F0IC8gMiwgY29ubmVjdG9yVGhyb2F0IC8gMilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhd0ljb24oY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHBvaW50czogQXJyYXk8UG9pbnQ+KSB7XHJcbiAgICBpZiAodGhpcy5jcm9wcGVyU2V0dGluZ3Muc2hvd0NlbnRlck1hcmtlcikge1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5tb3ZlVG8ocG9pbnRzWzBdLnggKyB0aGlzLnBvc2l0aW9uLngsIHBvaW50c1swXS55ICsgdGhpcy5wb3NpdGlvbi55KTtcclxuICAgICAgZm9yIChjb25zdCBwIG9mIHBvaW50cykge1xyXG4gICAgICAgIGN0eC5saW5lVG8ocC54ICsgdGhpcy5wb3NpdGlvbi54LCBwLnkgKyB0aGlzLnBvc2l0aW9uLnkpO1xyXG4gICAgICB9XHJcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY3JvcHBlclNldHRpbmdzLmNyb3BwZXJEcmF3U2V0dGluZ3MuZHJhZ0ljb25GaWxsQ29sb3I7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmNyb3BwZXJTZXR0aW5ncy5jcm9wcGVyRHJhd1NldHRpbmdzLmRyYWdJY29uU3Ryb2tlV2lkdGg7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY3JvcHBlclNldHRpbmdzLmNyb3BwZXJEcmF3U2V0dGluZ3MuZHJhZ0ljb25TdHJva2VDb2xvcjtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlY2FsY3VsYXRlUG9zaXRpb24oYm91bmRzOiBCb3VuZHMpIHtcclxuICAgIGNvbnN0IGMgPSBib3VuZHMuZ2V0Q2VudHJlKCk7XHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKGMueCwgYy55KTtcclxuICAgIG5ldyBQb2ludFBvb2woKS5pbnN0YW5jZS5yZXR1cm5Qb2ludChjKTtcclxuICB9XHJcbn1cclxuIl19